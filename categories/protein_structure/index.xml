<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蛋白结构 on 叶宇浩随记博客</title>
    <link>https://example.com/categories/protein_structure/</link>
    <description>Recent content in 蛋白结构 on 叶宇浩随记博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/protein_structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PPT插入可交互的3D蛋白结构展示</title>
      <link>https://example.com/p/ppt%E6%8F%92%E5%85%A5%E5%8F%AF%E4%BA%A4%E4%BA%92%E7%9A%843d%E8%9B%8B%E7%99%BD%E7%BB%93%E6%9E%84%E5%B1%95%E7%A4%BA/</link>
      <pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/ppt%E6%8F%92%E5%85%A5%E5%8F%AF%E4%BA%A4%E4%BA%92%E7%9A%843d%E8%9B%8B%E7%99%BD%E7%BB%93%E6%9E%84%E5%B1%95%E7%A4%BA/</guid>
      <description>偶然间在公众号的文章看到了在PPT中插入3D结构的展示方法[^学习来源1],感觉挺好玩的，遂写此post记录
结构格式要求 结构文件格式要求为gltf格式
gltf格式 glTF™ is a royalty-free specification for the efficient transmission and loading of 3D scenes and models by engines and applications. glTF minimizes the size of 3D assets, and the runtime processing needed to unpack and use them. glTF defines an extensible, publishing format that streamlines authoring workflows and interactive services by enabling the interoperable use of 3D content across the industry. [^学习来源2]简单来说，gltf就是一种3D结构格式的文件
将结构保存为gtlf格式 使用完PyMOL调整完蛋白结构后，直接保存为gltf格式即可
save xxx.</description>
    </item>
    
    <item>
      <title>氨基酸结构缺失修复</title>
      <link>https://example.com/p/%E6%B0%A8%E5%9F%BA%E9%85%B8%E7%BB%93%E6%9E%84%E7%BC%BA%E5%A4%B1%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/%E6%B0%A8%E5%9F%BA%E9%85%B8%E7%BB%93%E6%9E%84%E7%BC%BA%E5%A4%B1%E4%BF%AE%E5%A4%8D/</guid>
      <description>说明 之前从PDB数据库上下载某个基因的野生型结构时，发生存在AA缺失的现象，即某些位点上的AA没有，碰巧这个缺失的位点在突变的范围内，位点的缺失在PyMOL中表现为断点，看了下PDB文件 (从PDB数据库上下载下来的原文件) 的missing信息 (只有从PDB数据库上下载的结构文件才会有missing字段，像结构预测的软件是没有的)，确实是缺失的（避免是因为PyMOL不能识别导致）
位点在377上缺失 紧接着，使用trRosetta预测了野生型的蛋白结构，发现在使用gmx pdb2gmx 时发现这个新的结构文件上原子缺失了（并不等同于上面的氨基酸缺失），如下报错： 也就是说gmx发现这个蛋白结构文件23位点的色氨酸Trp缺失了CH2的原子信息（注意可能还存在其他原子的缺失，只是Tyr-23的缺失在前面，所以先报错了）
遂记录下解决办法，针对AA缺失和原子缺失的修复方法
氨基酸缺失 Chimera-modeller填补 注意了，这里一定是要用PDB数据库上下载下来的结构文件，因为只有PDB上的结构文件，有足够多的补充信息， 比如上面在Vscode中展示的missing字段
导入结构文件，只显示蛋白主体 command-line中输入
#导入文件 open 蛋白的IDcode(PDB数据库的) 可以看到这些377 residue确实是缺失的，断点线处
#只展示蛋白主体，因为PDB上还含有配体、水分子等信息，这里巧用的chimera的内置的key-word delete ~protein #确保删除了配体 delete ligand 注意下，这里delete后的那些stick展现的残基实际上是这个蛋白的活性位点，chimera会默认突出显示
使用Model Loops 顶部menu
Tools... Structure Editing... Model/Refine Loops 调整参数（主要调整这几个）：
Model/remodel : 看自己的缺失位置去确定 Number of models to generate: 生成的结果数 Modeller license key: 这个key可以自己去modeller申请，免费的，MODELIRANJE 实际上这里用到的是Modeller同源建模 等待结果即可，chiemra主窗口的左下角可以看进度（不过这里使用的云端的Modeller的程序，当然了可以指定自己本地的Modeller） 保存最优结构pdb 运行完Modeller，Chimera会自动将结构比对在主窗口中 这里保存#1.1的结果
单击Modeller Results中的#1.1 在点击Modeller Results中不同的结构时，chimera会自动比对这个结构和原来的结构，并且此时主窗口和model都会只展示（选择）他们两个，其他则被暂时hide了起来
保存为PDB文件 顶部menu File... Save PDB... 注意，在Save models的选项中，选择自己想要保存的结果即可，比如这里的#1.1就是377位点上被补全后的氨基酸+整个其他位点的整体蛋白了，所以可以不用选择自己导入的那个结构文件了 确实补充上了
手动复制位点PDB信息到文件 这个方法有个前提，就是，能同时找到同一个类型的蛋白，比如说A和B两个蛋白，他们实际上是同一个蛋白（不要在乎这里的名字A、B），（假设）A是通过X-ray的方法得到的结构信息，它缺失的位点信息是1-39，B是通过NMR的方法得到的结构信息，它缺失的位点信息是532-543，那么我想补全A的话，可以通过B的1-39的PDB坐标复制到A的文件中 这个产生的结果，相对其他办法，比较麻烦，而且误差会比较大，但是也很有用</description>
    </item>
    
    <item>
      <title>Obtaining protein foldability information from computational models of AlphaFold2 and RoseTTAFold</title>
      <link>https://example.com/p/obtaining-protein-foldability-information-from-computational-models-of-alphafold2-and-rosettafold/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/obtaining-protein-foldability-information-from-computational-models-of-alphafold2-and-rosettafold/</guid>
      <description>Obtaining protein foldability information from computational models of AlphaFold2 and RoseTTAFold
link:https://www.sciencedirect.com/science/article/pii/S2001037022003683</description>
    </item>
    
    <item>
      <title>蛋白结构图片美化</title>
      <link>https://example.com/p/%E8%9B%8B%E7%99%BD%E7%BB%93%E6%9E%84%E5%9B%BE%E7%89%87%E7%BE%8E%E5%8C%96/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/%E8%9B%8B%E7%99%BD%E7%BB%93%E6%9E%84%E5%9B%BE%E7%89%87%E7%BE%8E%E5%8C%96/</guid>
      <description>这是我在别人的基础上，然后自行调整了很多细节信息，较为满意的结构图片的展示，特写此post来记录分享（take an example），当然了，能帮到大家也是一件极好的事 （主要用的都是cmd的命令，所以本记录不适合零基础）
载入蛋白结构 这里我使用的是PDB code 4MDS
load 4MDS 去除水分子和配体 这一步根据自己的需要去做 （其实做不做都无所谓）
去水 去水（蛋白主体旁边的红点其实就是水分子）
remove solvent 展示序列信息 set seq_view,1 可以看到这里有三个配体，名字分别为23H，DMS
去除配体结构 resn 后面的名字 （23H，DMS）根据自己研究蛋白的配体名字来修改
remove resn 23H remove resn DMS 复制主要参数 这里的参数来源于参考资料[^1]，我略作了修改
select resn HOH remove sele select hydrophobic, (resn ala+gly+val+ile+leu+phe+met) show sticks, (hydrophobic and (!name c+n+o)) color yelloworange, hydrophobic select hydrophilic, !hydrophobic and (!name c+n+o) show sticks, hydrophilic color lightblue, hydrophilic color white, bb. color oxygen, elem o color nitrogen, elem N color sulfur, elem S set ray_trace_mode,3 set stick_radius, 0.</description>
    </item>
    
    <item>
      <title>PyMOL蛋白结美化参数(整合)</title>
      <link>https://example.com/p/pymol%E8%9B%8B%E7%99%BD%E7%BB%93%E7%BE%8E%E5%8C%96%E5%8F%82%E6%95%B0%E6%95%B4%E5%90%88/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/pymol%E8%9B%8B%E7%99%BD%E7%BB%93%E7%BE%8E%E5%8C%96%E5%8F%82%E6%95%B0%E6%95%B4%E5%90%88/</guid>
      <description>PyMOL的功能十分强大，特别是命令行的参数，它可以对蛋白结构的细节展示进行许多调整，方便使用，这里集合一些参数，直接复制进pymol的cmd即可（本post会持续更新）
PyMOL-wiki PyMOL官网本身有gallery（https://pymolwiki.org/index.php/Gallery），这里会有一堆大佬去上传自己的展示参数，只不过，我发现似乎有点少 下面的大部分是转载的[^学习来源2],当然了，用到自己的结构上时，可以自行参数调整，比如不喜欢侧链的信息，就可以自行hide起来，自行修改color等
细节侧链美漫风 参数
reinitialize select resn HOH remove sele select hydrophobic, (resn ala+gly+val+ile+leu+phe+met) show sticks, (hydrophobic and (!name c+n+o)) color yelloworange, hydrophobic select hydrophilic, !hydrophobic and (!name c+n+o) show sticks, hydrophilic color lightblue, hydrophilic color white, bb. color oxygen, elem o color nitrogen, elem N color sulfur, elem S set ray_trace_mode,3 set stick_radius, 0.4 set cartoon_loop_radius, 0.4 set cartoon_oval_width, 0.4 set cartoon_rect_width, 0.4 set fog,0 bg_color white set valence, 0 set ray_shadow, 0 zoom orient ray 图片展示（take PDB code:7f52，删除了水分子，图片背景实际上是白色的，放在word中会更明显） 个人很喜欢这个风格，不过我经常会将其他的侧链信息都隐藏起来，从而突出某些位点的sticks</description>
    </item>
    
    <item>
      <title>De novo design of small beta barrel proteins</title>
      <link>https://example.com/p/de-novo-design-of-small-beta-barrel-proteins/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/de-novo-design-of-small-beta-barrel-proteins/</guid>
      <description>Highly accurate protein structure prediction with AlphaFold
link:https://www.nature.com/articles/s41586-021-03819-2</description>
    </item>
    
    <item>
      <title>《蛋白质结构预测实验指南》</title>
      <link>https://example.com/p/%E8%9B%8B%E7%99%BD%E8%B4%A8%E7%BB%93%E6%9E%84%E9%A2%84%E6%B5%8B%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/%E8%9B%8B%E7%99%BD%E8%B4%A8%E7%BB%93%E6%9E%84%E9%A2%84%E6%B5%8B%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%8D%97/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>1_Getting_Started_Menu_Version-2</title>
      <link>https://example.com/p/1_getting_started_menu_version-2/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/1_getting_started_menu_version-2/</guid>
      <description>Part 2 - Molecular Representations and Surfaces Fectch 结构 这次使用的是1d86 （PDB code）,打开后发现是个DNA结构，长这样，Chimera默认对DNA对象展示的标准是：
ribbon 带状 个性化展示核糖核酸和碱基 养成好习惯，把Side View也打开下 如果Fetch时不成功，可以手动去RCSB上下载蛋白的结构文件，再使用Menu去open
Presets: 快速修改表现形式 打开presets的选择 顶部menu 这里选择第二种看看
Presets... Interactive 2 (all atoms) presets 可供选择的套装说明 参考[^学习来源2] presets 总的来说就是已经设定好的一系列配置，它可以一键快速调整你的结构的展现形式，颜色等
Interactive模式 这个模式是为了方便展示”交互作用的“（官方的描述是Interactive presets are meant for interactive manipulation and analysis. They may change which items (atoms, ribbons, surfaces) are displayed and how they are colored.）
Interactive 1 (ribbons) shows most peptide and nucleic acid chains as ribbons, plus atomic detail (excluding hydrogens on carbon atoms) for residues within 3.</description>
    </item>
    
    <item>
      <title>PDB文件中氨基酸原子编码的规则</title>
      <link>https://example.com/p/pdb%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B0%A8%E5%9F%BA%E9%85%B8%E5%8E%9F%E5%AD%90%E7%BC%96%E7%A0%81%E7%9A%84%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/pdb%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B0%A8%E5%9F%BA%E9%85%B8%E5%8E%9F%E5%AD%90%E7%BC%96%E7%A0%81%E7%9A%84%E8%A7%84%E5%88%99/</guid>
      <description>我发现一直好像对PDB文件中氨基酸的原子编码规则不是很清楚，然后我去看了网上的帖子，发现都好像有点不太对，故整理此post来弄懂
氨基酸的结构通式 注意哪个是α原子 PDB文件中原子编码具体的命令规则 规则 基于PyMOL 和 PDB文件
氨基(NH)和羧基上(CO)的所有原子都采用本名，C, N, O, H，如果一个氨基酸的侧链基团也出现了氨基和羧基，侧链基团R上的氨基和羧基上的原子信息不是采用的本名，否则无法与主链的肽基区分开 侧链基团上的氨基和羧基的原子也采用下面提到的规则 首先α-C被命名为CA，注意生物学上哪个C才能被定义为CA原子，另外，PDB文件中会显示，但是PyMOL中有时候不会显示出CA的标签，其后的C按照成键关系逐级递推，名字后缀依次为 B-G-D-E-Z-H（此为希腊字母表顺序：α(A)，β(B)，γ(G)，δ(D)，ε(E)，ζ(Z)，η(H)……） 注意这个”成键逐级递推“的意思，例如，当一个CD，下面的直接相连的节点若是非H原子，且含有多个其他原子（比如含有两个C），则这多个原子都是隶属于CE的，为了区分要加上不同的数字编号(从1开始)（CE1,CE2） 对于氢原子，命名采用“H+所连上级原子后缀(如有数字也要带上)+数字编号”形式 对于处于与”中间CX(X代表任意字母or数字)原子“相连氢原子，且成键上一级的原子不是成环的，数字编号是从”2“开始的 若成键的上一个原子处于中间C，且这个C一端是H原子，另一端是其他原子，则这个H原子不用写数字，另一端的那个非H原子形成下一个节点的H原子数字编号从1开始 若成键的上一级注意处于环结构中时，因为成键的上一级所属的逐级的字母是同一个字母（环的原子，加上逐级递增的原则），为了区分，H的数字编号是从”1“开始的 CA相连的一个H原子就不用加上最后的数字编号 若成键的上一个原子是最后一个原子，对于处于上末尾的H原子（存在多个H原子时）的数字编号是从1开始的 处于最后末端的H原子（只存在一个H原子时），不管上一级成键的原子是否在环结构中，不用加数字编号，因为就它一个 本质就是标号法，注意H上的那些数字都是为了区分，不同的H才加上去的描述 例子 不含环的氨基酸 按照上面这张图的的绿色线条的箭头方向前进 进行说明
第一处的C、O是位于羧基上（非侧链）的，所以直接写出C、O原子即可 第二处的N、H是位于氨基上（非侧链）的，所以直接写出所有原子N、H即可 HA 右侧其实是CA，前面规则了CA在PyMOL的标签中是不会显示出来的，则这个HA的H原子是与CA相连，所以直接写HA即可 第三处的C，根据逐级递推，这个C写作CB，与它相连的两个H，又因为CB是处于中间的C原子，所以两个H原子写作HB2、HB3 第四处CG同理 第五处CD同理，只是下面成键相连的不是H原子了 第六处的氧原子0E1和第七处的氮原子NE2，因为它成键的上一级是CD，且是本身是氧原子，不是H原子，故按照逐级递推的原则，分别写作OE、NE，但是又因为他们两个成键的都是CD，所以加上个序号，分别为OE1,NE2 第八处和第九处的H原子，成键相连的上一级为NE2，且是H原子，不用逐级递推，又位于侧链的末端所以，写作HE21,HE22 (E2是上一级的编号) 含环的氨基酸 注意逐级递增，特别是那个苯环中的CE1和CE2、（字母的编号是按逐级的顺序来的），HE1和HE2以及最后的HH
最后附上20种氨基酸的相关信息 （下面的信息部分来自于学习来源3作者提供的excel表格）
丙氨酸 英文 Alanine 简写 ALA - A SMILES C[C@H](N)C(O)=O 结构 异亮氨酸 英文 Isoleucine 简写 ILE - I SMILES CC[C@H](C)[C@H](N)C(O)=O 结构式 亮氨酸 英文 Leucine 简写 LEU-L SMILES CC(C)C[C@H](N)C(O)=O 结构式 缬氨酸 英文 Valine 简写 VAL - V SMILES CC(C)[C@H](N)C(O)=O 结构式 甲硫氨酸 英文 Methionine 简写 MET - M SMILES O=C(O)[C@@H](N)CCSC 结构式 苯丙氨酸 英文 Phenylalanine 简写 PHE - F SMILES O=C(O)[C@@H](N)CC1=CC=CC=C1 结构式 色氨酸 英文 Tryptophan 简写 TRP - W SMILES O=C(O)[C@@H](N)CC1=CNC2=CC=CC=C12 结构式 酪氨酸 英文 Tyrosine 简写 TYR - Y SMILES O=C(O)[C@H](CC1=CC=C(O)C=C1)N 结构式 天冬酰胺 英文 Asparagine 简写 ASN - N SMILES O=C(O)[C@H](CC(N)=O)N 结构式 半胱氨酸 英文 Cysteine 简写 CYS - C SMILES O=C(O)[C@H](CS)N 结构式 谷氨酰胺 英文 Glutamine 简写 GLN - Q SMILES O=C(O)[C@H](CCC(N)=O)N 结构式 丝氨酸 英文 Serine 简写 SER - S SMILES O=C(O)[C@H](CO)N 结构式 苏氨酸 英文 Threonine 简写 THR - T SMILES O=C(O)[C@H]([C@H](O)C)N 结构式 精氨酸 英文 Arginine 简写 ARG - R SMILES O=C(O)[C@H](CCCNC(N)=N)N 结构式 组氨酸 英文 Histidine 简写 HIS - H SMILES O=C(O)[C@H](CC1=CNC=N1)N 结构式 赖氨酸 英文 Lysine 简写 LYS - K SMILES O=C([C@@H](N)CCCCN)O 结构式 天冬氨酸 英文 Aspartic acid 简写 ASP - D SMILES O=C(O)[C@H](CC(O)=O)N 结构式 谷氨酸 英文 Glutamic acid 简写 GLU - E SMILES O=C(O)[C@H](CCC(O)=O)N 结构式 甘氨酸 英文 Glycine 简写 GLY - G SMILES O=C(O)CN 结构式 脯氨酸 英文 Proline 简写 PRO - P SMILES O=C([C@@H]1CCCN1)O 结构式 注意下，因为每个氨基酸的3D结构都是在整个蛋白中抽出来展示的，此时氨基酸是残基了，所以不想2d结构式那样是一个真正完整的氨基酸（比如COOH已经形成了肽键）</description>
    </item>
    
    <item>
      <title>Protein structure prediction and analysis using the Robetta server</title>
      <link>https://example.com/p/protein-structure-prediction-and-analysis-using-the-robetta-server/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/protein-structure-prediction-and-analysis-using-the-robetta-server/</guid>
      <description>Protein structure prediction and analysis using the Robetta server
link:https://academic.oup.com/nar/article/32/suppl_2/W526/1040731?login=false</description>
    </item>
    
    <item>
      <title>ch11_PDB模块</title>
      <link>https://example.com/p/ch11_pdb%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/ch11_pdb%E6%A8%A1%E5%9D%97/</guid>
      <description>biopython官方地址：https://biopython.org/
github地址：https://github.com/biopython/biopython/blob/master/
中文版教程：https://biopython-cn.readthedocs.io/zh_CN/latest/cn/chr06.html
biopython包的说明（具体到每个模块了）：https://www.osgeo.cn/biopython/Bio.HMM.DynamicProgramming.html
Bio.PDB是Biopython中处理生物大分子晶体结构的模块。除了别的类之外，Bio.PDB包含PDBParser类，此类能够产生一个Structure对象，以一种较方便的方式获取文件中的原子数据。只是在处理PDB文件头所包含的信息时，该类有一定的局限性。
晶体结果文件的读与写 读取PDB文件 首先，我们创建一个 PDBParser 对象：
&amp;gt;&amp;gt;&amp;gt; from Bio.PDB.PDBParser import PDBParser &amp;gt;&amp;gt;&amp;gt; p = PDBParser(PERMISSIVE=1) PERMISSIV 标签表示一些与PDB文件相关的问题会被忽略（注意某些原子和/或残基会丢失）。如果没有这个标签，则会在解析器运行期间有问题被检测到的时候生成一个 PDBConstructionException 标签。
接着通过 PDBParser 解析PDB文件，就产生了Structure对象（在此例子中，PDB文件为’pdb1fat.ent’，’1fat’是用户定义的结构名称）:
&amp;gt;&amp;gt;&amp;gt; structure_id = &amp;#34;1fat&amp;#34; &amp;gt;&amp;gt;&amp;gt; filename = &amp;#34;pdb1fat.ent&amp;#34; &amp;gt;&amp;gt;&amp;gt; s = p.get_structure(structure_id, filename) 你可以从PDBParser对象中用 get_header 和 get_trailer 方法来提取PDB文件中的文件头和文件尾（简单的字符串列表）。然而许多PDB文件头包含不完整或错误的信息。许多错误在等价的mmCIF格式文件中得到修正。 因此，如果你对文件头信息感兴趣，可以用下面即将讲到的 MMCIF2Dict 来提取信息，而不用处理PDB文件文件头。
现在澄清了，让我们回到解析PDB文件头这件事上。结构对象有个属性叫 header ，这是一个将头记录映射到其相应值的Python字典。
例子：
&amp;gt;&amp;gt;&amp;gt; resolution = structure.header[&amp;#39;resolution&amp;#39;] &amp;gt;&amp;gt;&amp;gt; keywords = structure.header[&amp;#39;keywords&amp;#39;] 在这个字典中可用的关键字有 name 、 head 、 deposition_date 、 release_date 、 structure_method 、 resolution 、 structure_reference （映射到一个参考文献列表）、 journal_reference 、 author 、和 compound （映射到一个字典，其中包含结晶化合物的各种信息）。</description>
    </item>
    
    <item>
      <title>1_Getting_Started_Menu_Version-1</title>
      <link>https://example.com/p/1_getting_started_menu_version-1/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/1_getting_started_menu_version-1/</guid>
      <description>Part 1:Manipulation, Selection, and Chains Fetch:获取结构文件 顶部菜单栏menu选择 这里获取1zik
File... Fetch by ID... 会弹出下图右边的那个窗口，选择对应的数据库database,输入对应的结构ID即可 Action: 改变结构展现的形式 Cihmrea默认读取结构后，展现为ribbon带状，tan棕黄色 可以通过 顶部action 选择展现其他形式 (&amp;hellip; 代表空格，即需要点击鼠标才会出现后面的选项)
Actions... Atoms/Bonds... show 选择原子模式看看，从右图的结果可以看出，同PyMOL一样，结构的展现形式都是叠加上去的，即上一个展示形式仍然存在 注意下，不同的原子（主要是杂原子（非C原子））展现的颜色也不一样，即byelement
O原子：红色 N原子：蓝色 更多的，如下图片所示 图片原来源[^2] ,经过处理 恢复ribbon带状的展现形式
Actions... Ribbon... hide Actions... Ribbon... show 鼠标的基本操作和属性 默认的鼠标设置下 左键旋转 滑轮 XY方向上放大缩小 右键 放大缩小 （需要长按） 我觉得滑轮和右键没啥区别
调整 如果需要其他鼠标设置可以去顶部menu菜单栏自行调整
Favorites... Preferences [category] Mouse 还是比较喜欢默认的，所以其他模式的没研究过
鼠标接触蛋白的作用 显示残基的信息 格式为：
res-name res-num.chain atom-name 方便展示，我重新加上了atom/bond的形式，下面的图上半部分是这个蛋白的pdb文件，下面是对应AA在Chimera鼠标轻触显示的信息（以11号的GLU谷氨酸，E，为例子）
轻触的是键时,结果的格式是： 氨基酸名字 位置.链 原子-原子(互相连接的两个原子) 距离 如图中结果说明，这个蛋白A链11号上的位置是谷氨酸，这个氨基酸Ca与Cb成键的距离为1.520A 轻触的是的单个原子时，结果的格式是： 氨基酸名字 位置.链 所选原子名称 鼠标多选AA Ctrl + 单击 这能选中单个AA Shift + Ctrl + 单击 可以连续追加选中多个AA 补充 （keyboard - up） 但是实际上，这样选的可能还不是完整的整个AA，可能是其AA上的某个原子元素，可以通过键盘的方向键（上），选中整个AA（即这样可以通过单个原子或者元素，选到整个氨基酸） 等同于menu的 Select.</description>
    </item>
    
  </channel>
</rss>
